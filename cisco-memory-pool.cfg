#-MIBFILE: cisco-memory-pool.mib

CISCO-MEMORY-POOL-MIB DEFINITIONS ::= BEGIN


DisplayString ::=
	OCTET STRING (SIZE(0..255))

PhysAddress ::=
	OCTET STRING

MacAddress ::=
	OCTET STRING (SIZE(6))

TruthValue ::=
	INTEGER {
	true(1),
	false(2)
	}

TestAndIncr ::=
	INTEGER (0..2147483647)

AutonomousType ::=
	OBJECT IDENTIFIER

InstancePointer ::=
	OBJECT IDENTIFIER

VariablePointer ::=
	OBJECT IDENTIFIER

RowPointer ::=
	OBJECT IDENTIFIER

RowStatus ::=
	INTEGER {
	active(1),
	notInService(2),
	notReady(3),
	createAndGo(4),
	createAndWait(5),
	destroy(6)
	}

TimeStamp ::=
	TimeTicks

TimeInterval ::=
	INTEGER (0..2147483647)

DateAndTime ::=
	OCTET STRING (SIZE(8|11))

StorageType ::=
	INTEGER {
	other(1),
	volatile(2),
	nonVolatile(3),
	permanent(4),
	readOnly(5)
	}

TDomain ::=
	OBJECT IDENTIFIER

TAddress ::=
	OCTET STRING (SIZE(1..255))

cisco OBJECT IDENTIFIER ::= { enterprises 9 }
ciscoMgmt OBJECT IDENTIFIER ::= { cisco 9 }
Dscp ::=
	INTEGER (0..63)

QosLayer2Cos ::=
	INTEGER (0..7)

QueueRange ::=
	INTEGER {
	oneQ(1),
	twoQ(2),
	threeQ(3),
	fourQ(4),
	eightQ(8),
	sixteenQ(16),
	thirtyTwoQ(32),
	sixtyFourQ(64)
	}

ThresholdSetRange ::=
	INTEGER {
	zeroT(0),
	oneT(1),
	twoT(2),
	fourT(4),
	eightT(8)
	}

Percent ::=
	INTEGER (0..100)

QosInterfaceQueueType ::=
	INTEGER {
	oneQ1t(1),
	oneQ2t(2),
	oneQ4t(3),
	oneQ8t(4),
	twoQ1t(5),
	twoQ2t(6),
	twoQ4t(7),
	twoQ8t(8),
	threeQ1t(9),
	threeQ2t(10),
	threeQ4t(11),
	threeQ8t(12),
	fourQ1t(13),
	fourQ2t(14),
	fourQ4t(15),
	fourQ8t(16),
	eightQ1t(17),
	eightQ2t(18),
	eightQ4t(19),
	eightQ8t(20),
	sixteenQ1t(21),
	sixteenQ2t(22),
	sixteenQ4t(23),
	sixtyfourQ1t(24),
	sixtyfourQ2t(25),
	sixtyfourQ4t(26),
	oneP1Q0t(27),
	oneP1Q4t(28),
	oneP1Q8t(29),
	oneP2Q1t(30),
	oneP2Q2t(31),
	oneP3Q1t(32),
	oneP7Q8t(33),
	oneP3Q8t(34)
	}

QosInterfaceTypeCapabilities ::=
	OCTET STRING {
	unspecified(0),
	inputL2Classification(1),
	inputIpClassification(2),
	outputL2Classification(3),
	outputIpClassification(4),
	inputPortClassification(19),
	outputPortClassification(20),
	inputUflowPolicing(5),
	inputAggregatePolicing(6),
	outputUflowPolicing(7),
	outputAggregatePolicing(8),
	policeByMarkingDown(9),
	policeByDropping(10),
	inputUflowShaping(21),
	inputAggregateShaping(22),
	outputUflowShaping(23),
	outputAggregateShaping(24),
	fifo(11),
	wrr(12),
	wfq(13),
	cq(14),
	pq(15),
	cbwfq(16),
	pqWrr(25),
	pqCbwfq(26),
	tailDrop(17),
	wred(18)
	}

RoleCombination ::=
	OCTET STRING (SIZE(0..255))

PolicyInstanceId ::=
	OCTET STRING

Unsigned64 ::=
	OCTET STRING

CiscoMemoryPoolTypes ::=
	INTEGER (1..65535)

ciscoMemoryPoolMIB OBJECT IDENTIFIER ::= { ciscoMgmt 48 }

ciscoMemoryPoolObjects OBJECT IDENTIFIER ::= { ciscoMemoryPoolMIB 1 }

ciscoMemoryPoolTable OBJECT-TYPE
	SYNTAX SEQUENCE OF CiscoMemoryPoolEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A table of memory pool monitoring entries."
	::= { ciscoMemoryPoolObjects 1 }


ciscoMemoryPoolEntry OBJECT-TYPE
	SYNTAX CiscoMemoryPoolEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "An entry in the memory pool monitoring table."
	INDEX { ciscoMemoryPoolType  }

	::= { ciscoMemoryPoolTable 1 }

ciscoMemoryPoolEntry ::=
	SEQUENCE {
		ciscoMemoryPoolType CiscoMemoryPoolTypes,
		ciscoMemoryPoolName DisplayString,
		ciscoMemoryPoolAlternate Integer32,
		ciscoMemoryPoolValid TruthValue,
		ciscoMemoryPoolUsed Gauge32,
		ciscoMemoryPoolFree Gauge32,
		ciscoMemoryPoolLargestFree Gauge32
		}

ciscoMemoryPoolType OBJECT-TYPE
	SYNTAX INTEGER (1..65535)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The type of memory pool for which this entry
contains information."
	::= { ciscoMemoryPoolEntry 1 }


ciscoMemoryPoolName OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A textual name assigned to the memory pool.  This
object is suitable for output to a human operator,
and may also be used to distinguish among the various
pool types, especially among dynamic pools."
	::= { ciscoMemoryPoolEntry 2 }


ciscoMemoryPoolAlternate OBJECT-TYPE
	SYNTAX INTEGER (0..65535)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Indicates whether or not this memory pool has an
alternate pool configured.  Alternate pools are
used for fallback when the current pool runs out
of memory.

If an instance of this object has a value of zero,
then this pool does not have an alternate.  Otherwise
the value of this object is the same as the value of
ciscoMemoryPoolType of the alternate pool."
	::= { ciscoMemoryPoolEntry 3 }


ciscoMemoryPoolValid OBJECT-TYPE
	SYNTAX TruthValue
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Indicates whether or not the remaining objects in
this entry contain accurate data.  If an instance
of this object has the value false (which in and of
itself indicates an internal error condition), the
values of the remaining objects in the conceptual row
may contain inaccurate information (specifically, the
reported values may be less than the actual values)."
	::= { ciscoMemoryPoolEntry 4 }


ciscoMemoryPoolUsed OBJECT-TYPE
	SYNTAX Gauge
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Indicates the number of bytes from the memory pool
that are currently in use by applications on the
managed device."
	::= { ciscoMemoryPoolEntry 5 }


ciscoMemoryPoolFree OBJECT-TYPE
	SYNTAX Gauge
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Indicates the number of bytes from the memory pool
that are currently unused on the managed device.

Note that the sum of ciscoMemoryPoolUsed and
ciscoMemoryPoolFree is the total amount of memory
in the pool"
	::= { ciscoMemoryPoolEntry 6 }


ciscoMemoryPoolLargestFree OBJECT-TYPE
	SYNTAX Gauge
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Indicates the largest number of contiguous bytes
from the memory pool that are currently unused on
the managed device."
	::= { ciscoMemoryPoolEntry 7 }


ciscoMemoryPoolUtilizationTable OBJECT-TYPE
	SYNTAX SEQUENCE OF CiscoMemoryPoolUtilizationEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A table of memory pool utilization entries. Each of the
objects provides a general idea of how much of the memory
pool has been used over a given period of time. It is
determined as a weighted decaying average."
	::= { ciscoMemoryPoolObjects 2 }


ciscoMemoryPoolUtilizationEntry OBJECT-TYPE
	SYNTAX CiscoMemoryPoolUtilizationEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "An entry in the memory pool utilization table."
	::= { ciscoMemoryPoolUtilizationTable 1 }

ciscoMemoryPoolUtilizationEntry ::=
	SEQUENCE {
		ciscoMemoryPoolUtilization1Min Percent,
		ciscoMemoryPoolUtilization5Min Percent,
		ciscoMemoryPoolUtilization10Min Percent
		}

ciscoMemoryPoolUtilization1Min OBJECT-TYPE
	SYNTAX Percent
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "This is the memory pool utilization for 1 minute."
	::= { ciscoMemoryPoolUtilizationEntry 1 }


ciscoMemoryPoolUtilization5Min OBJECT-TYPE
	SYNTAX Percent
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "This is the memory pool utilization for 5 minutes."
	::= { ciscoMemoryPoolUtilizationEntry 2 }


ciscoMemoryPoolUtilization10Min OBJECT-TYPE
	SYNTAX Percent
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "This is the memory pool utilization for 10 minutes."
	::= { ciscoMemoryPoolUtilizationEntry 3 }


ciscoMemoryPoolNotifications OBJECT IDENTIFIER ::= { ciscoMemoryPoolMIB 2 }

ciscoMemoryPoolConformance OBJECT IDENTIFIER ::= { ciscoMemoryPoolMIB 3 }

ciscoMemoryPoolCompliances OBJECT IDENTIFIER ::= { ciscoMemoryPoolConformance 1 }

ciscoMemoryPoolGroups OBJECT IDENTIFIER ::= { ciscoMemoryPoolConformance 2 }

ciscoMemoryPoolGroup OBJECT IDENTIFIER ::= { ciscoMemoryPoolGroups 1 }

ciscoMemoryPoolUtilizationGroup OBJECT IDENTIFIER ::= { ciscoMemoryPoolGroups 2 }

END

