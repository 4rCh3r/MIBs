#-MIBFILE: VMWARE-RESOURCES-MIB.mib

VMWARE-RESOURCES-MIB DEFINITIONS ::= BEGIN


DisplayString ::=
	OCTET STRING (SIZE(0..255))

PhysAddress ::=
	OCTET STRING

MacAddress ::=
	OCTET STRING (SIZE(6))

TruthValue ::=
	INTEGER {
	true(1),
	false(2)
	}

TestAndIncr ::=
	INTEGER (0..2147483647)

AutonomousType ::=
	OBJECT IDENTIFIER

InstancePointer ::=
	OBJECT IDENTIFIER

VariablePointer ::=
	OBJECT IDENTIFIER

RowPointer ::=
	OBJECT IDENTIFIER

RowStatus ::=
	INTEGER {
	active(1),
	notInService(2),
	notReady(3),
	createAndGo(4),
	createAndWait(5),
	destroy(6)
	}

TimeStamp ::=
	TimeTicks

TimeInterval ::=
	INTEGER (0..2147483647)

DateAndTime ::=
	OCTET STRING (SIZE(8|11))

StorageType ::=
	INTEGER {
	other(1),
	volatile(2),
	nonVolatile(3),
	permanent(4),
	readOnly(5)
	}

TDomain ::=
	OBJECT IDENTIFIER

TAddress ::=
	OCTET STRING (SIZE(1..255))

VmwSubsystemTypes ::=
	INTEGER {
	unknown(1),
	chassis(2),
	powerSupply(3),
	fan(4),
	cpu(5),
	memory(6),
	battery(7),
	temperatureSensor(8),
	raidController(9),
	voltage(10)
	}

VmwCIMAlertTypes ::=
	INTEGER {
	other(1),
	communications(2),
	qos(3),
	processingError(4),
	deviceAlert(5),
	environmentalAlert(6),
	modelChange(7),
	securityAlert(8)
	}

VmwCIMAlertFormat ::=
	INTEGER {
	unknown(0),
	other(1),
	cimObjectPath(2)
	}

VmwSubsystemStatus ::=
	INTEGER {
	unknown(1),
	normal(2),
	marginal(3),
	critical(4),
	failed(5)
	}

VmwCIMSeverity ::=
	INTEGER {
	unknown(0),
	other(1),
	information(2),
	warning(3),
	minor(4),
	major(5),
	critical(6),
	fatal(7)
	}

VmwCimName ::=
	OCTET STRING (SIZE(0..256))

VmwConnectedState ::=
	OCTET STRING (SIZE(7))

VmwLongDisplayString ::=
	OCTET STRING

VmwLongSnmpAdminString ::=
	OCTET STRING

vmware OBJECT IDENTIFIER ::= { enterprises 6876 }
vmwResources OBJECT IDENTIFIER ::= { vmware 3 }
vmwResourcesMIB OBJECT IDENTIFIER ::= { vmwResources 10 }

vmwCPU OBJECT IDENTIFIER ::= { vmwResources 1 }

vmwNumCPUs OBJECT-TYPE
	SYNTAX Gauge
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Number of physical CPUs on the system."
	::= { vmwCPU 1 }


vmwMemory OBJECT IDENTIFIER ::= { vmwResources 2 }

vmwMemSize OBJECT-TYPE
	SYNTAX Gauge
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Amount of physical memory present on machine as provided by Hypervisor.
It is computed from the sum of vmwMemCOS plus unreserved property as
reported VIM subsystem. Unreserved is computed from hypervisor's total
number of memory pages.

VIM Parent Container: https://esx.example.com/mob/?moid=memorySystem
VIM property: unreserved
MOB: https://esx.example.com/mob/?moid=memoryManagerSystem&doPath=consoleReservationInfo

For reference here two other related VIM properties:
VIM property: memorySize
MOB: https://esx.example.com/mob/?moid=ha%2dhost&doPath=summary%2ehardware

VIM property: totalMemory
MOB: https://esx.example.com/mob/?moid=ha%2dcompute%2dres&doPath=summary
"
	::= { vmwMemory 1 }


vmwMemCOS OBJECT-TYPE
	SYNTAX Gauge
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "This managed object reports memory allocated for COS, theConsole OS
(aka Service Console) which is a memory region carved out of physical
memory to boot a RedHat Linux distribution/provides device management
interface.

Note that in the VMware ESXi product there is no COS so this will report 0.

This managed object reports the amount of physical memory allocated to the COS.
VIM Parent Container: https://esx.example.com/mob/?moid=memorySystem
VIM property: serviceConsoleReserved
MOB: https://esx.example.com/mob/?moid=memoryManagerSystem&doPath=consoleReservationInfo
"
	::= { vmwMemory 2 }


vmwMemAvail OBJECT-TYPE
	SYNTAX Gauge
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Amount of memory available to run Virutal Machines and to allocate for
hypervisor needs. It is computed by subtracting vmwMemCOS from
vmwMemSize. The result is the amount of memory available to VMs and to
the hypervisor.

To get a more accurate view of memory available to VMs the following property
represents the amount of resources available for the root resource pool for running 
virtual machines.

VIM property: effectiveMemory
MOB: https://esx.example.com/mob/?moid=ha%2dcompute%2dres&doPath=summary
"
	::= { vmwMemory 3 }


vmwStorage OBJECT IDENTIFIER ::= { vmwResources 5 }

vmwHostBusAdapterNumber OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Number of entries in vmwHostBusAdapterTable."
	::= { vmwStorage 1 }


vmwHostBusAdapterTable OBJECT-TYPE
	SYNTAX SEQUENCE OF VmwHostBusAdapterEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Inventory of Host Bus Adatpers found in this system. 
CLI: esxcfg-scsidevs -a
VIM Parent Container: https://esx.example.com/mob/?moid=storageSystem
VIM property: hostBusAdapter
MOB: https://esx.example.com/mob/?moid=storageSystem&doPath=storageDeviceInfo"
	::= { vmwStorage 2 }


vmwHostBusAdapterEntry OBJECT-TYPE
	SYNTAX VmwHostBusAdapterEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Details for this adapter."
	INDEX { vmwHostBusAdapterIndex  }

	::= { vmwHostBusAdapterTable 1 }

vmwHostBusAdapterEntry ::=
	SEQUENCE {
		vmwHostBusAdapterIndex Integer32,
		vmwHbaDeviceName DisplayString,
		vmwHbaBusNumber Integer32,
		vmwHbaStatus VmwSubsystemStatus,
		vmwHbaModelName DisplayString,
		vmwHbaDriverName DisplayString,
		vmwHbaPci DisplayString
		}

vmwHostBusAdapterIndex OBJECT-TYPE
	SYNTAX INTEGER (0..1023)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "An arbitrary index assigned to this adapter."
	::= { vmwHostBusAdapterEntry 1 }


vmwHbaDeviceName OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The system device name for this host bus adapter."
	::= { vmwHostBusAdapterEntry 2 }


vmwHbaBusNumber OBJECT-TYPE
	SYNTAX INTEGER (-1|0..1023)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The host bus number. For unsuported HBA's reports -1."
	::= { vmwHostBusAdapterEntry 3 }


vmwHbaStatus OBJECT-TYPE
	SYNTAX VmwSubsystemStatus
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The operational status of the adapter."
	::= { vmwHostBusAdapterEntry 4 }


vmwHbaModelName OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The model name of the host bus adapter."
	::= { vmwHostBusAdapterEntry 5 }


vmwHbaDriverName OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The name of the driver."
	::= { vmwHostBusAdapterEntry 6 }


vmwHbaPci OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The Peripheral Connect Interface (PCI) ID of the device."
	::= { vmwHostBusAdapterEntry 7 }


vmwResourceMIBConformance OBJECT IDENTIFIER ::= { vmwResourcesMIB 2 }

vmwResourceMIBCompliances OBJECT IDENTIFIER ::= { vmwResourceMIBConformance 1 }

vmwResMIBGroups OBJECT IDENTIFIER ::= { vmwResourceMIBConformance 2 }

vmwResourceGroup OBJECT IDENTIFIER ::= { vmwResMIBGroups 1 }

END

