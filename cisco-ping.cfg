#-MIBFILE: cisco-ping.mib

CISCO-PING-MIB DEFINITIONS ::= BEGIN


DisplayString ::=
	OCTET STRING (SIZE(0..255))

PhysAddress ::=
	OCTET STRING

MacAddress ::=
	OCTET STRING (SIZE(6))

TruthValue ::=
	INTEGER {
	true(1),
	false(2)
	}

TestAndIncr ::=
	INTEGER (0..2147483647)

AutonomousType ::=
	OBJECT IDENTIFIER

InstancePointer ::=
	OBJECT IDENTIFIER

VariablePointer ::=
	OBJECT IDENTIFIER

RowPointer ::=
	OBJECT IDENTIFIER

RowStatus ::=
	INTEGER {
	active(1),
	notInService(2),
	notReady(3),
	createAndGo(4),
	createAndWait(5),
	destroy(6)
	}

TimeStamp ::=
	TimeTicks

TimeInterval ::=
	INTEGER (0..2147483647)

DateAndTime ::=
	OCTET STRING (SIZE(8|11))

StorageType ::=
	INTEGER {
	other(1),
	volatile(2),
	nonVolatile(3),
	permanent(4),
	readOnly(5)
	}

TDomain ::=
	OBJECT IDENTIFIER

TAddress ::=
	OCTET STRING (SIZE(1..255))

OwnerString ::=
	OCTET STRING (SIZE(0..255))

InterfaceIndex ::=
	INTEGER (1..2147483647)

InterfaceIndexOrZero ::=
	INTEGER (0..2147483647)

cisco OBJECT IDENTIFIER ::= { enterprises 9 }
ciscoMgmt OBJECT IDENTIFIER ::= { cisco 9 }
CiscoNetworkProtocol ::=
	INTEGER {
	ip(1),
	decnet(2),
	pup(3),
	chaos(4),
	xns(5),
	x121(6),
	appletalk(7),
	clns(8),
	lat(9),
	vines(10),
	cons(11),
	apollo(12),
	stun(13),
	novell(14),
	qllc(15),
	snapshot(16),
	atmIlmi(17),
	bstun(18),
	x25pvc(19),
	ipv6(20),
	cdm(21),
	nbf(22),
	bpxIgx(23),
	clnsPfx(24),
	http(25),
	unknown(65535)
	}

CiscoNetworkAddress ::=
	OCTET STRING

SAPType ::=
	INTEGER (0..254)

CountryCode ::=
	OCTET STRING (SIZE(0|2))

CountryCodeITU ::=
	OCTET STRING

EntPhysicalIndexOrZero ::=
	INTEGER (0..2147483647)

CiscoRowOperStatus ::=
	INTEGER {
	active(1),
	activeDependencies(2),
	inactiveDependency(3),
	missingDependency(4)
	}

CiscoPort ::=
	INTEGER (0..65535)

CiscoIpProtocol ::=
	INTEGER (0..255)

CiscoLocationClass ::=
	INTEGER {
	chassis(1),
	shelf(2),
	slot(3),
	subSlot(4),
	port(5),
	subPort(6),
	channel(7),
	subChannel(8)
	}

CiscoLocationSpecifier ::=
	OCTET STRING (SIZE(0..255))

CiscoInetAddressMask ::=
	OCTET STRING

CiscoAbsZeroBasedCounter32 ::=
	Gauge

CiscoSnapShotAbsCounter32 ::=
	OCTET STRING

CiscoAlarmSeverity ::=
	INTEGER {
	cleared(1),
	indeterminate(2),
	critical(3),
	major(4),
	minor(5),
	warning(6),
	info(7)
	}

PerfHighIntervalCount ::=
	OCTET STRING

ConfigIterator ::=
	OCTET STRING

BulkConfigResult ::=
	OCTET STRING (SIZE(0..255))

ListIndex ::=
	INTEGER (1..2147483647)

ListIndexOrZero ::=
	INTEGER (0..2147483647)

TimeIntervalSec ::=
	OCTET STRING

TimeIntervalMin ::=
	OCTET STRING

CiscoMilliSeconds ::=
	OCTET STRING

MicroSeconds ::=
	OCTET STRING

ciscoPingMIB OBJECT IDENTIFIER ::= { ciscoMgmt 16 }

ciscoPingMIBObjects OBJECT IDENTIFIER ::= { ciscoPingMIB 1 }

ciscoPingTable OBJECT-TYPE
	SYNTAX SEQUENCE OF CiscoPingEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A table of ping request entries."
	::= { ciscoPingMIBObjects 1 }


ciscoPingEntry OBJECT-TYPE
	SYNTAX CiscoPingEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A ping request entry.

A management station wishing to create an entry should
first generate a pseudo-random serial number to be used
as the index to this sparse table.  The station should
then create the associated instance of the row status
and row owner objects.  It must also, either in the same
or in successive PDUs, create the associated instance of
the protocol and address objects.  It should also modify
the default values for the other configuration objects
if the defaults are not appropriate.

Once the appropriate instance of all the configuration
objects have been created, either by an explicit SNMP
set request or by default, the row status should be set
to active to initiate the request.  Note that this entire
procedure may be initiated via a single set request which
specifies a row status of createAndGo as well as specifies
valid values for the non-defaulted configuration objects.

Once the ping sequence has been activated, it cannot be
stopped -- it will run until the configured number of
packets have been sent.

Once the sequence completes, the management station should
retrieve the values of the status objects of interest, and
should then delete the entry.  In order to prevent old
entries from clogging the table, entries will be aged out,
but an entry will never be deleted within 5 minutes of
completing."
	INDEX { ciscoPingSerialNumber  }

	::= { ciscoPingTable 1 }

ciscoPingEntry ::=
	SEQUENCE {
		ciscoPingSerialNumber Integer32,
		ciscoPingProtocol CiscoNetworkProtocol,
		ciscoPingAddress CiscoNetworkAddress,
		ciscoPingPacketCount Integer32,
		ciscoPingPacketSize Integer32,
		ciscoPingPacketTimeout Integer32,
		ciscoPingDelay Integer32,
		ciscoPingTrapOnCompletion TruthValue,
		ciscoPingSentPackets Counter32,
		ciscoPingReceivedPackets Counter32,
		ciscoPingMinRtt Integer32,
		ciscoPingAvgRtt Integer32,
		ciscoPingMaxRtt Integer32,
		ciscoPingCompleted TruthValue,
		ciscoPingEntryOwner OwnerString,
		ciscoPingEntryStatus RowStatus,
		ciscoPingVrfName OCTET STRING
		}

ciscoPingSerialNumber OBJECT-TYPE
	SYNTAX INTEGER (1..2147483647)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Object which specifies a unique entry in the
ciscoPingTable.  A management station wishing
to initiate a ping operation should use a
pseudo-random value for this object when creating
or modifying an instance of a ciscoPingEntry.
The RowStatus semantics of the ciscoPingEntryStatus
object will prevent access conflicts."
	::= { ciscoPingEntry 1 }


ciscoPingProtocol OBJECT-TYPE
	SYNTAX CiscoNetworkProtocol
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The protocol to use.
Once an instance of this object is created, its
value can not be changed."
	::= { ciscoPingEntry 2 }


ciscoPingAddress OBJECT-TYPE
	SYNTAX CiscoNetworkAddress
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The address of the device to be pinged.
An instance of this object cannot be created until the
associated instance of ciscoPingProtocol is created."
	::= { ciscoPingEntry 3 }


ciscoPingPacketCount OBJECT-TYPE
	SYNTAX INTEGER (1..2147483647)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Specifies the number of ping packets to send to the target
in this sequence."
	::= { ciscoPingEntry 4 }


ciscoPingPacketSize OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Specifies the size of ping packets to send to the target
in this sequence.  The lower and upper boundaries of this
object are protocol-dependent.
An instance of this object cannot be modified unless the
associated instance of ciscoPingProtocol has been created
(so as to allow protocol-specific range checking on the
new value)."
	::= { ciscoPingEntry 5 }


ciscoPingPacketTimeout OBJECT-TYPE
	SYNTAX INTEGER (0..3600000)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Specifies the amount of time to wait for a response to a
transmitted packet before declaring the packet 'dropped.'"
	::= { ciscoPingEntry 6 }


ciscoPingDelay OBJECT-TYPE
	SYNTAX INTEGER (0..3600000)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Specifies the minimum amount of time to wait before sending
the next packet in a sequence after receiving a response or
declaring a timeout for a previous packet.  The actual delay
may be greater due to internal task scheduling."
	::= { ciscoPingEntry 7 }


ciscoPingTrapOnCompletion OBJECT-TYPE
	SYNTAX TruthValue
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Specifies whether or not a ciscoPingCompletion trap should
be issued on completion of the sequence of pings.  If such a
trap is desired, it is the responsibility of the management
entity to ensure that the SNMP administrative model is
configured in such a way as to allow the trap to be delivered."
	::= { ciscoPingEntry 8 }


ciscoPingSentPackets OBJECT-TYPE
	SYNTAX Counter
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The number of ping packets that have been sent to the target
in this sequence."
	::= { ciscoPingEntry 9 }


ciscoPingReceivedPackets OBJECT-TYPE
	SYNTAX Counter
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The number of ping packets that have been received from the
target in this sequence."
	::= { ciscoPingEntry 10 }


ciscoPingMinRtt OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The minimum round trip time of all the packets that have
been sent in this sequence.

This object will not be created until the first ping
response in a sequence is received."
	::= { ciscoPingEntry 11 }


ciscoPingAvgRtt OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The average round trip time of all the packets that have
been sent in this sequence.

This object will not be created until the first ping
response in a sequence is received."
	::= { ciscoPingEntry 12 }


ciscoPingMaxRtt OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The maximum round trip time of all the packets that have
been sent in this sequence.

This object will not be created until the first ping
response in a sequence is received."
	::= { ciscoPingEntry 13 }


ciscoPingCompleted OBJECT-TYPE
	SYNTAX TruthValue
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Set to true when all the packets in this sequence have been
either responded to or timed out."
	::= { ciscoPingEntry 14 }


ciscoPingEntryOwner OBJECT-TYPE
	SYNTAX OwnerString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The entity that configured this entry."
	::= { ciscoPingEntry 15 }


ciscoPingEntryStatus OBJECT-TYPE
	SYNTAX RowStatus
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The status of this table entry.  Once the entry status is
set to active, the associate entry cannot be modified until
the sequence completes (ciscoPingCompleted is true)."
	::= { ciscoPingEntry 16 }


ciscoPingVrfName OBJECT-TYPE
	SYNTAX OCTET STRING (SIZE(0..32))
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "This field is used to specify the VPN name in 
which the ping will be used. For regular ping this
field should not be configured. The agent will use
this field to identify the VPN routing Table for 
this ping. This is the same ascii string used in 
the CLI to refer to this VPN. "
	::= { ciscoPingEntry 17 }


ciscoPingMIBTrapPrefix OBJECT IDENTIFIER ::= { ciscoPingMIB 2 }

ciscoPingMIBTraps OBJECT IDENTIFIER ::= { ciscoPingMIBTrapPrefix 0 }

ciscoPingMIBConformance OBJECT IDENTIFIER ::= { ciscoPingMIB 3 }

ciscoPingMIBCompliances OBJECT IDENTIFIER ::= { ciscoPingMIBConformance 1 }

ciscoPingMIBGroups OBJECT IDENTIFIER ::= { ciscoPingMIBConformance 2 }

ciscoPingMIBGroup OBJECT IDENTIFIER ::= { ciscoPingMIBGroups 1 }

ciscoPingMIBGroupVpn OBJECT IDENTIFIER ::= { ciscoPingMIBGroups 2 }

ciscoPingMIBNotificationGroup OBJECT IDENTIFIER ::= { ciscoPingMIBGroups 3 }

ciscoPingCompletion TRAP-TYPE
	ENTERPRISE ciscoPingMIBTrapPrefix
	VARIABLES { ciscoPingCompleted, ciscoPingSentPackets, ciscoPingReceivedPackets }
DESCRIPTION "A ciscoPingCompleted trap is sent at the completion
of a sequence of pings if such a trap was requested
when the sequence was initiated.  In addition to the
above listed objects (which are always present),
the message will contain the following objects if 
any responses were received:
ciscoPingMinRtt
ciscoPingAvgRtt
ciscoPingMaxRtt
It will also contain the following object if the ping
is to a VPN address:
ciscoPingVrfName"
	::= 1


END

